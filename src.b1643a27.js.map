{"version":3,"sources":["index.js"],"names":["refs","searchField","document","body","querySelector","formEl","gallery","searchFieldValue","KEY","IMAGE_TYPE","ORIENTATION","SAFESEARCH","BASE_URL","searchParams","URLSearchParams","key","q","image_type","orientation","safesearch","requestGeneration","value","set","toString","getData","response","fetch","json","hits","onSubmit","event","preventDefault","renderImages","error","console","log","arrayOfImagesData","markup","map","image","webformatURL","tags","likes","views","comments","downloads","join","insertAdjacentHTML","addEventListener"],"mappings":";AAKA,MAAMA,EAAO,CACTC,YAAaC,SAASC,KAAKC,cAAc,uBACzCC,OAAQH,SAASC,KAAKC,cAAc,gBACpCE,QAASJ,SAASC,KAAKC,cAAc,aAIzC,IAAIG,EAAmB,KAEvB,MAAMC,EAAM,qCACNC,EAAa,QACbC,EAAc,aACdC,EAAa,OACbC,EAAW,2BAEXC,EAAe,IAAIC,gBAAgB,CACrCC,IAAKP,EACLQ,EAAGT,EACHU,WARe,QASfC,YAAaR,EACbS,WARe,SAenB,SAASC,IACL,MAAMb,EAAmBP,EAAKC,YAAYoB,MAE1C,OADAR,EAAaS,IAAI,IAAKf,GACfM,EAAaU,WAGxB,eAAeC,IACX,MAAMC,QAAiBC,SAASd,KAAYC,KAG5C,aAFmBY,EAASE,QACRC,KAIxB,eAAeC,EAASC,GACpBA,EAAMC,iBACNX,IAEA,IAEIY,QADqBR,KAEvB,MAAOS,GACLC,QAAQC,IAAI,aAAcF,IAKlC,SAASD,EAAaI,GAClB,MAAMC,EAASD,EAAkBE,IAAIC,4CAE3BA,EAAMC,sBAAsBD,EAAME,2FAGhCF,EAAMG,iEAGNH,EAAMI,oEAGHJ,EAAMK,wEAGLL,EAAMM,6CAInBC,KAAK,IACR9C,EAAKM,QAAQyC,mBAAmB,aAAcV,GAjDlDrC,EAAKK,OAAO2C,iBAAiB,SAAUnB","file":"src.b1643a27.js","sourceRoot":"../src","sourcesContent":["// key - твой уникальный ключ доступа к API.\n// q - термин для поиска. То, что будет вводить пользователь.\n// image_type - тип изображения. Мы хотим только фотографии, поэтому задай значение photo.\n// orientation - ориентация фотографии. Задай значение horizontal.\n//     safesearch - фильтр по возрасту.Задай значение true\nconst refs = {\n    searchField: document.body.querySelector('.search-form__input'),\n    formEl: document.body.querySelector('.search-form'),\n    gallery: document.body.querySelector('.gallery'),\n\n}\n\nlet searchFieldValue = null; \n\nconst KEY = '27097192-0671b14f562b4984cf83e0bbe';\nconst IMAGE_TYPE = 'photo';\nconst ORIENTATION = 'horizontal';\nconst SAFESEARCH = 'true';\nconst BASE_URL = 'https://pixabay.com/api/';\n\nconst searchParams = new URLSearchParams({\n    key: KEY,\n    q: searchFieldValue,\n    image_type: IMAGE_TYPE,\n    orientation: ORIENTATION,\n    safesearch: SAFESEARCH,\n})\n\n// При нажатии на кнопку поиска вызывается функция onSubmit.\nrefs.formEl.addEventListener('submit', onSubmit);\n\n// Функция изменения значения поля поиска в параметрах запроса. Возвращает обновленные параметры в виде JSON-строки.\nfunction requestGeneration() {;\n    const searchFieldValue = refs.searchField.value;\n    searchParams.set('q', searchFieldValue);\n    return searchParams.toString();\n}\n// Функция запроса в базу данных. Возвращает промис с данными в JSON-формате \nasync function getData() {\n    const response = await fetch(`${BASE_URL}?${searchParams}`);\n    const data = await response.json();\n    const images = data.hits;\n    return images;\n}\n\nasync function onSubmit(event) {\n    event.preventDefault();\n    requestGeneration();\n\n    try {\n        const images = await getData();\n        renderImages(images);\n    } catch (error) {\n        console.log('error :>> ', error);\n    }\n    // renderImages(arrayOfImagesData);\n}\n\nfunction renderImages(arrayOfImagesData) {\n    const markup = arrayOfImagesData.map(image => {\n        return `<div class=\"photo-card\">\n  <img src=\"${image.webformatURL}\" alt=\"${image.tags}\" loading=\"lazy\" />\n  <div class=\"info\">\n    <p class=\"info-item\">\n      <b>Likes${image.likes}</b>\n    </p>\n    <p class=\"info-item\">\n      <b>Views${image.views}</b>\n    </p>\n    <p class=\"info-item\">\n      <b>Comments${image.comments}</b>\n    </p>\n    <p class=\"info-item\">\n      <b>Downloads${image.downloads}</b>\n    </p>\n  </div>\n</div>`;\n    }).join('');\n    refs.gallery.insertAdjacentHTML('afterbegin', markup);\n}\n\n\n\n// const images = data.hits;\n//     const imagesContainer = document.body.querySelector('.images-container');\n//     imagesContainer.innerHTML = '';\n//     images.forEach(image => {\n//         const imageElement = document.createElement('img');\n//         imageElement.src = image.previewURL;\n//         imageElement.alt = image.tags;\n//         imagesContainer.append(imageElement);\n//     });\n\n// final result"]}